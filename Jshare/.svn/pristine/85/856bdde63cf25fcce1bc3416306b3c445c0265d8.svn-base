package com.digitalchina.web.common.share.action;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.digitalchina.frame.message.MessageObject;
import com.digitalchina.frame.message.ServiceContext;
import com.digitalchina.web.common.action.ResponseResultVo;
import com.digitalchina.web.common.api.ResultPageVo;
import com.digitalchina.web.common.share.bussiness.CircleManager;
import com.digitalchina.web.common.share.bussiness.ShareRecordManager;
import com.digitalchina.web.common.share.bussiness.UserBindManager;
import com.digitalchina.web.common.share.vo.CircleVo;
import com.digitalchina.web.common.share.vo.UserVo;
import com.digitalchina.web.common.spring.http.model.JsonModelAttributeMap;
import com.digitalchina.web.common.user.api.Constants;
import com.digitalchina.web.common.util.config.PropertiesHandler;
import com.digitalchina.web.common.util.lang.NumberHandler;
import com.digitalchina.web.common.util.lang.ObjectHandler;
import com.qiniu.http.Response;
import com.qiniu.storage.UploadManager;
import com.qiniu.util.Auth;

/**
 * 类型描述：<br/>
 * 碳闲置Action
 * 
 * @author LJn
 */
@RestController
public class ShareAction {

	private final static Logger LOG = LogManager.getLogger(ShareAction.class);
	
	private final static String IMAGE_TYPE_REGEX = "^(jpg|png|gif|jpeg)$";
	private static final String IMAGE_URL = PropertiesHandler.getProperty("image.url");
	
	@Autowired
	private CircleManager circleManager;
	@Autowired
	private ShareRecordManager recordManager;
	@Autowired
	private UserBindManager userBindManager;

	/**
	 * 方法描述：<br/>
	 * 查找圈子
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 *
	 * @param map
	 * @return 
	 */
	@RequestMapping(value = "/circle", method = RequestMethod.GET)
	public ResponseResultVo findCircle(JsonModelAttributeMap map) {

		String id = map.getString("id");
		String socialId = map.getString("socialId");
		
		if (StringUtils.isNotBlank(id)) {
			CircleVo circleVo = circleManager.findVo(id);
			return ResponseResultVo.success().setData(circleVo);
			
		}else if(StringUtils.isNotBlank(socialId)){
			UserVo userBind = userBindManager.findBySocailId(socialId);
			
			if(!ObjectHandler.isEmpty(userBind) 
					&& userBind.getCircles().size()!=0){
				return ResponseResultVo.success().setData(userBind);
			}
		}
		
		return ResponseResultVo.failure();
	}
	
	/**
	 * 方法描述：<br/>
	 * 用户头像上传
	 * 
	 * @createTime 2016年8月10日
	 * @author maiwj
	 *
	 * @param user
	 * @param avatar
	 * @return
	 */
	@RequestMapping(value = "/circle/stream/{id}", method = { RequestMethod.PUT, RequestMethod.POST })
	public ResponseResultVo circleStream(@PathVariable("id") String circleId, @RequestParam("avatar") MultipartFile avatar) {
		
		 if(avatar.isEmpty()){
			 return ResponseResultVo.failure().setMsg("图像数据不能为空或图片类型未设置");
		 } else {
			 String imgType = FilenameUtils.getExtension(avatar.getOriginalFilename());
			 if (imgType != null && imgType.toLowerCase().matches(IMAGE_TYPE_REGEX)) {
				try {
					//密钥配置
					Auth auth = Auth.create(Constants.IMAGE_AK, Constants.IMAGE_SK);
					
					//创建上传对象
					UploadManager uploadManager = new UploadManager();
					String key = "qrcode/" + avatar.getOriginalFilename();
					String imageUrl = IMAGE_URL + key;
					File targetFile = new File(avatar.getOriginalFilename());  
					if(!targetFile.exists()){ targetFile.mkdirs(); }  
					avatar.transferTo(targetFile);
					String token = auth.uploadToken(Constants.IMAGE_BUCKETNAME);
					
					Response result = uploadManager.put(targetFile, key, token);
					
					if (result.isOK()) {
						targetFile.delete();
						
						CircleVo circleUpdate = circleManager.findVo(circleId);
						circleUpdate.setCodeUrl(imageUrl);
						circleManager.doModify(circleUpdate);
					}

					if (!result.isOK()) {
						return ResponseResultVo.failure().setMsg("用户头像上传失败，" + result.bodyString());
					}
					
					HashMap<String, String> data = new HashMap<String, String>(1);
					data.put("codeUrl", imageUrl);
					
					return ResponseResultVo.success().setData(data);
				} catch (IOException e) {
					return ResponseResultVo.failure().setMsg("图像数据异常");
				}
			 } else {
				 return ResponseResultVo.failure().setMsg("图片类型不可识别");
			 }
		 }
	}
	
	/**
	 * 方法描述：<br/>
	 * 查找闲置品
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/idle", method = RequestMethod.GET)
	public ResponseResultVo findIdle(JsonModelAttributeMap map) {

		String circleId = map.getString("circleId");
		Integer type = map.getInteger("type");

		Integer requestPage = map.getInteger("requestPage", 1);
		Integer pageSize = map.getInteger("pageSize", 20);
		
		if (StringUtils.isBlank(circleId) || type == null) {
			return ResponseResultVo.failure();
		} 
		
		Map<String, Object> conditions = new HashMap<String, Object>(2);
		conditions.put("circleId", circleId);
		conditions.put("type", type);
		
		ResultPageVo<?> result = recordManager
				.findVos(requestPage, pageSize, conditions );
		
		return ResponseResultVo.success().setData(result);
	}
}
