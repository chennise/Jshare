/*package com.digitalchina.web.common.share.action;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.digitalchina.web.common.action.ResponseResultVo;
import com.digitalchina.web.common.api.ResultPageVo;
import com.digitalchina.web.common.share.bussiness.CircleManager;
import com.digitalchina.web.common.share.bussiness.ShareRecordManager;
import com.digitalchina.web.common.share.bussiness.UserBindManager;
import com.digitalchina.web.common.share.vo.CircleVo;
import com.digitalchina.web.common.share.vo.ShareRecordVo;
import com.digitalchina.web.common.share.vo.UserVo;
import com.digitalchina.web.common.spring.http.annotation.JsonModelAttribute;
import com.digitalchina.web.common.spring.http.model.JsonModelAttributeMap;
import com.digitalchina.web.common.user.api.Constants;
import com.digitalchina.web.common.util.config.PropertiesHandler;
import com.digitalchina.web.common.validator.SaveGroup;
import com.qiniu.http.Response;
import com.qiniu.storage.UploadManager;
import com.qiniu.util.Auth;

*//**
 * 类型描述：<br/>
 * 碳闲置Action
 * 
 * @author LJn
 *//*
@RestController
public class ShareAction {

	private final static String IMAGE_TYPE_REGEX = "^(jpg|png|gif|jpeg)$";
	private static final String IMAGE_URL = PropertiesHandler.getProperty("image.url");
	
	@Autowired
	private CircleManager circleManager;
	@Autowired
	private ShareRecordManager recordManager;
	@Autowired
	private UserBindManager userBindManager;

	*//**
	 * 方法描述：<br/>
	 * 增加圈子
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 *
	 * @param meta
	 * @param error
	 * @return
	 *//*
	@RequestMapping(value = "/circle", method = RequestMethod.POST)
	public ResponseResultVo saveCircle(@JsonModelAttribute @Validated({ SaveGroup.class }) CircleVo circle, BindingResult error) {
		
		if (error.hasErrors()) {
			return ResponseResultVo.failure().setMsg(error);
		}

		circleManager.doSave(circle);
		
		return ResponseResultVo.success();
		 
	}
	
	*//**
	 * 方法描述：<br/>
	 * 用户加入圈子
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 *
	 * @param map
	 * @return 
	 *//*
	@RequestMapping(value = "/circle/bind", method = RequestMethod.GET)
	public ResponseResultVo bindcircle(JsonModelAttributeMap map) {

		String circleId = map.getString("circleId");
		String userId = map.getString("userId");
		
		if (StringUtils.isBlank(circleId) || StringUtils.isBlank(userId)) {
			return ResponseResultVo.failure();
		}
		
		CircleVo circle = circleManager.findVo(circleId);
		if(circle == null){
			return ResponseResultVo.failure();
		}
		
		UserVo user = userBindManager.findVo(userId);
		if(user == null){
			user = UserVo.createById(userId);
			user.getCircles().add(circle);
			userBindManager.doModify(user);
		} else {
			user.getCircles().add(circle);
			userBindManager.doSave(user);
		}
		
		return ResponseResultVo.success();
	}

	*//**
	 * 方法描述：<br/>
	 * 根据用户查找圈子
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 *
	 * @param map
	 * @return 
	 *//*
	@RequestMapping(value = "/circle", method = RequestMethod.GET)
	public ResponseResultVo findcircle(JsonModelAttributeMap map) {

		String id = map.getString("id");
		
		if (StringUtils.isBlank(id)) {
			return ResponseResultVo.failure();
		}

		UserVo result = userBindManager.findVo(id);

		return ResponseResultVo.success().setData(result);
	}
	
	*//**
	 * 方法描述：<br/>
	 * 增加闲置品
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 *
	 * @param meta
	 * @param error
	 * @return
	 *//*
	@RequestMapping(value = "/share", method = RequestMethod.POST)
	public ResponseResultVo saveShare(@JsonModelAttribute @Validated({ SaveGroup.class }) ShareRecordVo shareRecord,
		 @RequestParam("avatar") MultipartFile picture, BindingResult error) {
		
		if (error.hasErrors()) {
			return ResponseResultVo.failure().setMsg(error);
		}
		
		if(picture.isEmpty()){
			 return ResponseResultVo.failure().setMsg("图像数据不能为空或图片类型未设置");
		 } else {
			 String imgType = FilenameUtils.getExtension(picture.getOriginalFilename());
			 if (imgType != null && imgType.toLowerCase().matches(IMAGE_TYPE_REGEX)) {
				try {
					//密钥配置
					Auth auth = Auth.create(Constants.IMAGE_AK, Constants.IMAGE_SK);
					
					//创建上传对象
					UploadManager uploadManager = new UploadManager();
					String key = "share/" + picture.getOriginalFilename();
					String imageUrl = IMAGE_URL + key;
					File targetFile = new File(picture.getOriginalFilename());  
					if(!targetFile.exists()){ targetFile.mkdirs(); }  
					picture.transferTo(targetFile);
					String token = auth.uploadToken(Constants.IMAGE_BUCKETNAME);
					
					Response result = uploadManager.put(targetFile, key, token);
					
					if (result.isOK()) {
						shareRecord.setImageUrl(imageUrl);
						recordManager.doSave(shareRecord);
						
						return ResponseResultVo.success().setData(imageUrl);
					}

					if (!result.isOK()) {
						return ResponseResultVo.failure().setMsg("图片上传失败，" + result.bodyString());
					}
					
				} catch (IOException e) {
					return ResponseResultVo.failure().setMsg("图像数据异常");
				}
			 } else {
				 return ResponseResultVo.failure().setMsg("图片类型不可识别");
			 }
		 }
		return ResponseResultVo.failure();
	}
	
	
	*//**
	 * 方法描述：<br/>
	 * 查询闲置品记录
	 * 
	 * @createTime 2016年9月6日
	 * @author lijin
	 *
	 * @param map
	 * @return 
	 *//*
	@RequestMapping(value = "/share", method = RequestMethod.GET)
	public ResponseResultVo findShare(JsonModelAttributeMap map) {

		String circleId = map.getString("circleId");
		Integer type = map.getInteger("type");
		String keyword = map.getString("keyword");
		
		Integer requestPage = map.getInteger("requestPage", 1);
		Integer pageSize = map.getInteger("pageSize", 20);
		boolean orderByPublicTimeInASC = map.getBoolean("asc", false);
		
		if (StringUtils.isBlank(circleId) || type == null) {
			return ResponseResultVo.failure();
		} 

		ResultPageVo<?> result = recordManager
				.findVos(circleId, type, keyword, requestPage, pageSize, orderByPublicTimeInASC);

		return ResponseResultVo.success().setData(result);
		
	}
	
	
}
*/