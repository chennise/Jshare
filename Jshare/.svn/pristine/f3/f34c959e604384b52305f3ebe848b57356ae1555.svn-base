package com.digitalchina.web.common.user.action;

import java.io.IOException;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Base64Utils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.digitalchina.web.common.action.ResponseResultVo;
import com.digitalchina.web.common.hack.dfh.PhotoHandler;
import com.digitalchina.web.common.hack.dfh.PhotoHandler.Result;
import com.digitalchina.web.common.spring.http.annotation.JsonModelAttribute;
import com.digitalchina.web.common.spring.http.model.JsonModelAttributeMap;
import com.digitalchina.web.common.user.api.Constants;
import com.digitalchina.web.common.user.api.IUserManager;
import com.digitalchina.web.common.user.spring.SSOUser;
import com.digitalchina.web.common.user.vo.UserVo;

/**
 * 类型描述：<br/>
 * 我的Action
 * 
 * @createTime 2016年6月25日
 * @author maiwj
 * 
 */
@RequestMapping("/user/mine")
@RestController
public class MineAction {
	
	private final static String IMAGE_TYPE_REGEX = "^(jpg|png|gif|jpeg)$";

	@Autowired
	private IUserManager userManager;


	/**
	 * 方法描述：<br/>
	 * 获取用户信息
	 * 
	 * @createTime 2016年6月25日
	 * @author maiwj
	 *
	 * @param token
	 * @param map
	 * @return
	 */
	@RequestMapping(method = RequestMethod.GET)
	public ResponseResultVo info(SSOUser me) {
		return ResponseResultVo.success().setData(me);
	}

	/**
	 * 方法描述：<br/>
	 * 修改用户信息
	 * 
	 * @createTime 2016年6月25日
	 * @author maiwj
	 *
	 * @param me
	 * @param user
	 * @param error
	 * @return
	 */
	@RequestMapping(method = { RequestMethod.PUT, RequestMethod.POST })
	public ResponseResultVo modify(SSOUser me, @JsonModelAttribute UserVo user) {

		String nickname = user.getNickname();
		String email = user.getEmail();
		Integer sex = user.getSex();
		Long phone = user.getPhone();
		String address = user.getAddress();
		String password = user.getPassword();

		boolean finalModify = false;

		if (StringUtils.isNotBlank(nickname)) {
			me.setNickname(nickname);
			finalModify = true;
		}
		if (StringUtils.isNotBlank(email)) {
			me.setEmail(email);
			finalModify = true;
		}
		if (sex != null) {
			me.setSex(sex);
			finalModify = true;
		}
		if (phone != null) {
			UserVo userPhone = userManager.findOneByPhone(phone);
			if (userPhone != null) {
				return ResponseResultVo.failure("999001").setMsg("新手机号已经被占用");
			}
			me.setPhone(phone);
			finalModify = true;
		}
		if (StringUtils.isNotBlank(address)) {
			me.setAddress(address);
			finalModify = true;
		}
		if (StringUtils.isNotBlank(password)) {
			me.setPassword(password);
			finalModify = true;
		}

		if (finalModify) {
			user.setId(me.getId()); // 设入Id进行设置
			userManager.doModify(user);
		}
		return ResponseResultVo.success();
	}

	/**
	 * 方法描述：<br/>
	 * 用户头像操作，更新
	 * 
	 * @createTime 2016年6月25日
	 * @author maiwj
	 *
	 * @param meIds
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/avatar", method = { RequestMethod.PUT, RequestMethod.POST })
	public ResponseResultVo avatar(SSOUser user, JsonModelAttributeMap map) {
		String imgStr = map.getString("imgStr");
		if (StringUtils.isBlank(imgStr)) {
			return ResponseResultVo.failure().setMsg("图像数据不能为空或图片类型未设置");
		}
		
		Result result = PhotoHandler.localUser().imgStr(imgStr).zoom().thumb().service("usercenter")
				.to(Constants.IMAGE_URL);
		if (result.isSuccess()) {
			String imageUrl = result.getPaths().get("raw");
			user.setImageUrl(imageUrl);

			UserVo userUpdate = UserVo.createById(user.getId());
			userUpdate.setImageUrl(imageUrl);
			userManager.doModify(userUpdate);
		}

		if (!result.isSuccess()) {
			return ResponseResultVo.failure().setMsg("用户头像上传失败，" + result.getErrorMsg());
		}
		return ResponseResultVo.success().setData(result.getPaths());
	}
	
	/**
	 * 方法描述：<br/>
	 * 用户头像上传
	 * 
	 * @createTime 2016年8月10日
	 * @author maiwj
	 *
	 * @param user
	 * @param avatar
	 * @return
	 */
	@RequestMapping(value = "/avatar/stream", method = { RequestMethod.PUT, RequestMethod.POST })
	public ResponseResultVo avatar(SSOUser user, @RequestParam("avatar") MultipartFile avatar) {
		
		 if(avatar.isEmpty()){
			 return ResponseResultVo.failure().setMsg("图像数据不能为空或图片类型未设置");
		 } else {
			 String imgType = FilenameUtils.getExtension(avatar.getOriginalFilename());
			 if (imgType != null && imgType.toLowerCase().matches(IMAGE_TYPE_REGEX)) {
				try {
					String imgStr = Base64Utils.encodeToString(avatar.getBytes());
					
					Result result = PhotoHandler.localUser().imgStr(imgStr).zoom().thumb().service("usercenter")
							.to(Constants.IMAGE_URL);
					if (result.isSuccess()) {
						String imageUrl = result.getPaths().get("raw");
						user.setImageUrl(imageUrl);

						UserVo userUpdate = UserVo.createById(user.getId());
						userUpdate.setImageUrl(imageUrl);
						userManager.doModify(userUpdate);
					}

					if (!result.isSuccess()) {
						return ResponseResultVo.failure().setMsg("用户头像上传失败，" + result.getErrorMsg());
					}
					return ResponseResultVo.success().setData(result.getPaths());
				} catch (IOException e) {
					return ResponseResultVo.failure().setMsg("图像数据异常");
				}
			 } else {
				 return ResponseResultVo.failure().setMsg("图片类型不可识别");
			 }
		 }
	}

}
